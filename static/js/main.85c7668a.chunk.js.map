{"version":3,"sources":["components/CityCard/CityCard.tsx","components/CityCards/CityCards.tsx","api/api.ts","App.tsx","index.tsx"],"names":["CityCard","props","city","language","removeItem","name","sys","main","wind","weather","useState","metric","setMetric","temp","setTemp","useEffect","changeTemp","Math","round","className","classNames","card__warm","card__cold","country","currentDate","day","getDay","date","getDate","month","getMonth","hours","getHours","min","getMinutes","minutes","dateBuilder","Date","src","icon","alt","onClick","aria-hidden","ceil","feels_like","pressure","humidity","speed","CityCards","cities","map","id","request","cityName","a","fetch","response","json","App","value","setValue","setCities","setLanguage","error","setError","addCard","errorMessage","loadedCity","cod","undefined","find","currentCities","onChange","event","target","type","placeholder","aria-label","aria-describedby","clearCity","filter","newCity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85c7668a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './CityCard.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  city: WeatherFromAPI;\n  language: string;\n  removeItem: (city: WeatherFromAPI) => void;\n};\n\nexport const CityCard: React.FC<Props> = (props) => {\n  const {\n    city,\n    language,\n    removeItem,\n  } = props;\n  const {\n    name,\n    sys,\n    main,\n    wind,\n    weather,\n  } = city;\n\n  const [metric, setMetric] = useState<string>('C');\n  const [temp, setTemp] = useState<number>(main.temp);\n\n  const getC = () => {\n    setMetric('C');\n  };\n\n  const getF = () => {\n    setMetric('F');\n  };\n\n  const dateBuilder = (currentDate: Date) => {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    const day = days[currentDate.getDay()];\n    const date = currentDate.getDate();\n    const month = months[currentDate.getMonth()];\n    const hours = currentDate.getHours();\n    const min = currentDate.getMinutes();\n    let minutes = '';\n\n    if (min < 10) {\n      minutes = `0${min}`;\n    } else {\n      minutes = `${min}`;\n    }\n\n    return `${day}, ${date} ${month}, ${hours}:${minutes}`;\n  };\n\n  useEffect(() => {\n    let changeTemp = Math.round(main.temp);\n\n    switch (metric) {\n      case 'C':\n        changeTemp = Math.round(main.temp);\n        break;\n      case 'F':\n        changeTemp = Math.round(main.temp * 1.8 + 32);\n        break;\n      default:\n        break;\n    }\n\n    setTemp(changeTemp);\n  }, [metric]);\n\n  return (\n    <div\n      className={classNames(\n        'card',\n        {\n          card__warm: main.temp >= 0,\n          card__cold: main.temp < 0,\n        },\n      )}\n    >\n      <div\n        className=\"card__header\"\n      >\n        <div className=\"card__title\">\n          <div>\n            {`${name}, ${sys.country}`}\n          </div>\n          <div className=\"card__date\">\n            {dateBuilder(new Date())}\n          </div>\n        </div>\n        <div className=\"card__weather\">\n          <img\n            src={`https://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n            alt=\"icon\"\n            className=\"card__image\"\n          />\n          <div className=\"card__weatherMain\">\n            {weather[0].main}\n          </div>\n          <div\n            onClick={() => (\n              removeItem(city)\n            )}\n            aria-hidden=\"true\"\n            className=\"card__close\"\n          >\n            x\n          </div>\n        </div>\n      </div>\n      <div className=\"card__body\">\n        <div className=\"card__temp\">\n          <div className=\"card__tempInfo\">\n            <div className=\"card__tempCF\">\n              <div\n                className=\"card__tempItem\"\n              >\n                {temp}\n              </div>\n              <div\n                className=\"card__c\"\n                onClick={getC}\n                aria-hidden=\"true\"\n              >\n                &#176;C\n              </div>\n              <div\n                className=\"card__tempBreak\"\n              >\n                |\n              </div>\n              <div\n                className=\"card__f\"\n                onClick={getF}\n                aria-hidden=\"true\"\n              >\n                &#176;F\n              </div>\n            </div>\n            <div className=\"card__tempFeelsLike\">\n              Feels like:\n              {' '}\n              {Math.ceil(main.feels_like)}\n              &#176;C\n            </div>\n          </div>\n        </div>\n        <div className=\"card__info\">\n          <div className=\"\">\n            {(language === 'ru') && 'Давление: '}\n            {(language === 'ua') && 'Тиск: '}\n            {(language === 'en') && 'Pressure: '}\n            <span\n              className=\"card__infoValue\"\n            >\n              {main.pressure}\n              {(language === 'en') ? ' hPa' : ' гПа'}\n            </span>\n          </div>\n          <div className=\"\">\n            {(language === 'ru') && 'Влажность: '}\n            {(language === 'ua') && 'Вологість: '}\n            {(language === 'en') && 'Humidity: '}\n            <span\n              className=\"card__infoValue\"\n            >\n              {`${main.humidity}%`}\n            </span>\n          </div>\n          <div className=\"\">\n            {(language === 'ru') && 'Сила ветра: '}\n            {(language === 'ua') && 'Сила вітру: '}\n            {(language === 'en') && 'Wind: '}\n            <span\n              className=\"card__infoValue\"\n            >\n              {wind.speed}\n              {(language === 'ru' || (language === 'ua'))\n                && ' м/сек'}\n              {(language === 'en')\n                && ' m/sec'}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { CityCard } from '../CityCard/CityCard';\nimport './CityCards.scss';\n\ntype Props = {\n  cities: (WeatherFromAPI)[];\n  language: string;\n  removeItem: (city: WeatherFromAPI) => void;\n};\n\nexport const CityCards: React.FC<Props> = (props) => {\n  const {\n    cities,\n    language,\n    removeItem,\n  } = props;\n\n  return (\n    <div className=\"Cards\">\n      {cities.map((city: WeatherFromAPI) => (\n        <div\n          key={city.id}\n          className=\"Cards__item\"\n        >\n          <CityCard\n            city={city}\n            language={language}\n            removeItem={removeItem}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n","// export const BASE_URL = 'api.openweathermap.org/data/2.5/weather';\n\nconst API_KEY = 'c7b51f444a975bf9f7ef70112646932c';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5/';\n\nexport const request = async (cityName: string, language: string) => {\n  const response = await fetch(`${BASE_URL}weather?q=${cityName}&APPID=${API_KEY}&lang=${language}&units=metric`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { CityCards } from './components/CityCards/CityCards';\nimport './App.scss';\n\nimport { request } from './api/api';\n\nexport const App: React.FC = () => {\n  const [value, setValue] = useState<string>('');\n  const [cities, setCities] = useState<(WeatherFromAPI)[]>([]);\n  const [language, setLanguage] = useState<string>('en');\n  const [error, setError] = useState<string | null>(null);\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n    setError(null);\n  };\n\n  const selectedLanguage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setLanguage(event.target.value);\n  };\n\n  const addCard = async () => {\n    let errorMessage = '';\n\n    switch (language) {\n      case 'en':\n        errorMessage = 'City is not found';\n        break;\n\n      case 'ru':\n        errorMessage = 'Город не найден';\n        break;\n\n      case 'ua':\n        errorMessage = 'Місто не знайдено';\n        break;\n\n      default:\n        break;\n    }\n\n    const loadedCity = await request(value, language);\n\n    if (loadedCity.cod === '400' || loadedCity.cod === '404') {\n      setError(errorMessage);\n    }\n\n    const currentCity = cities.find(city => city.id === loadedCity?.id);\n\n    if ((currentCity === undefined) && (loadedCity !== null) && (loadedCity.cod === 200)) {\n      setCities((currentCities) => [...currentCities, loadedCity]);\n    }\n\n    setValue('');\n  };\n\n  const removeItem = (city: WeatherFromAPI) => {\n    const clearCity = cities.filter(newCity => newCity.id !== city.id);\n\n    setCities([...clearCity]);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__nav\">\n        <select\n          value={language}\n          onChange={selectedLanguage}\n          className=\"App__language form-select\"\n        >\n          <option value=\"en\">\n            English\n          </option>\n\n          <option value=\"ua\">\n            Ukrainian\n          </option>\n\n          <option value=\"ru\">\n            Russian\n          </option>\n        </select>\n        <div className=\"input-group mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Choose city\"\n            aria-label=\"Choose city\"\n            aria-describedby=\"button-addon2\"\n            value={value}\n            onChange={onChange}\n          />\n          <button\n            className=\"btn btn-outline-secondary\"\n            type=\"button\"\n            id=\"button-addon2\"\n            onClick={addCard}\n          >\n            Add\n          </button>\n        </div>\n        {error && (\n          <div\n            className=\"alert alert-danger\"\n          >\n            {error}\n          </div>\n        )}\n      </div>\n      <div className=\"App__body\">\n        <CityCards\n          cities={cities}\n          language={language}\n          removeItem={removeItem}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}